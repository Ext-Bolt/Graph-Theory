class Solution{
    void dfs(int node, vector<bool> &vis, string &s, vector<int> adj[]) {
        vis[node]=1;
        for(auto it:adj[node]) {
            if(!vis[it]) dfs(it, vis, s, adj);
        }
        s.push_back(node+'a');
    }
    
    string topoSort(int k, vector<int> adj[]) {
        vector<bool> vis(k);
        string s;
        for(int i=0; i<k; i++) {
            if(!vis[i]) dfs(i, vis, s, adj); 
        }
        reverse(s.begin(), s.end());
        return s;
    }
    public:
    string findOrder(string dict[], int n, int k) {
        vector<int> adj[k];
        for(int i=0; i<n-1; i++) {
            string word1=dict[i], word2=dict[i+1];
            for(int j=0; j<min(word1.size(), word2.size()); j++) {
                if(word1[j]!=word2[j]) {
                    adj[word1[j]-'a'].push_back(word2[j]-'a');
                    break;
                }
            }
        }
        return topoSort(k,adj);
    }
};
