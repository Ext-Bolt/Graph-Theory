vector<int> res;
int in[10001];  //in degree

void kahn(int n)    {
    queue<int> q;
    for(int i=1;i<=n;i++)   {
        if(in[i] == 0)  {
            q.push(i);
        }
    }
    
    while(!q.empty())   {
        
        int curr = q.front();
        res.push_back(curr);
        
        q.pop();
        
        for(int child : arr[curr])  {
            in[child]--;
            if(in[child] == 0)  {
                q.push(child);
            }
        }
    }
}

// also in adjacency list since these edges are unidirection //

for(int i=0;i<m;i++)    {
    cin>>x>>y;
    arr[x].push_back(y);
    in[y]++;
}

// 450-DSA  //

vector<int> topoSort(int v, vector<int> adj[]) 
	{
	    int in[v];
	    vector<int> res;
	    memset(in,0,sizeof(in));
	    for(int i = 0;i<v;i++)  {
	        for(int j = 0;j<adj[i].size();j++)  {
	            in[adj[i][j]]++;
	        }
	    }
	    queue<int> q;
	    for(int i=0;i<v;i++)    {
	        if(in[i] == 0)  {
	            q.push(i);
	        }
	    }
	    
	    while(!q.empty())   {
	        int curr = q.front();
	        res.push_back(curr);
	        q.pop();
	        
	        for(int node : adj[curr])   {
	            in[node]--;
	            if(in[node] == 0)   {
	                q.push(node);
	            }
	        }
	    }
	    return res;
	}
