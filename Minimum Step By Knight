// vector s : s[0],s[1] = x and y coordinate of starting point
// vector t : t[0],t[1] = x and y coordinate of the target point
// n -> size of board (n X n)

int minStepToReachTarget(vector<int>&s,vector<int>&t,int n)
	{
        int vis[n+1][n+1];
        memset(vis,0,sizeof(vis));
        vector<vector<int>> dist(n+1,vector<int> (n+1,0));
        int dx[8] = {2,-2,2,-2,-1,-1,1,1};
        int dy[8] = {1,1,-1,-1,2,-2,2,-2};
        
        queue<pair<int,int>> q;
        q.push({s[0],s[1]});
        vis[s[0]][s[1]] = 1;
        dist[s[0]][s[1]] = 0;
        
        while(!q.empty())   {
            int a = q.front().first;
            int b = q.front().second;
            
            q.pop();
            
            for(int i=0;i<8;i++)    {
                int x = a + dx[i];
                int y = b + dy[i];
                if((x>0 && y>0 && y<=n && x<=n && vis[x][y] == 0))    {
                    q.push({x,y});
                    vis[x][y] = 1;
                    dist[x][y] = dist[a][b] + 1;
                }
            }
        }
        return dist[t[0]][t[1]];
	}
