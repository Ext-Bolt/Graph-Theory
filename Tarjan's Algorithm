#include<bits/stdc++.h>
#define REP(i,n) for (int i = 1; i <= n; i++)
#define mod 1000000007
#define pb push_back
#define ff first
#define ss second
#define ii pair<int,int>
#define vi vector<int>
#define vii vector<ii>
#define lli long long int
#define endl '\n'

using namespace std;
vi g[1001];
bool vis[1001] , onStack[1001];
int in[1001] , low[1001];
stack<int> st;

int timer = 1 , SCC = 0;

void dfs(int node)
{
	vis[node] = 1;
	in[node] = low[node] = timer++;
	onStack[node] = true;
	st.push(node);
	
	for(int u : g[node])
	{
		if((vis[u] == true) && (onStack[u] == true))
		{
			low[node] = min(low[node] , in[u]);
		}
		else
		if(vis[u] == false)
		{
			dfs(u);
			
			if(onStack[u] == true)
			low[node] = min(low[node] , low[u]);
		}
	}
	
	if(in[node] == low[node])
	{
		SCC++;
		cout<<"SCC #"<<SCC<<endl;
		
		int u;
		
		while(1)
		{
			u = st.top();
			st.pop() , onStack[u] = false;
			cout<<u<<" ";
			
			if(u == node) break;
		}
		cout<<endl;
	}
}

int main()
{
	int n , m, a , b;
	cin>>n>>m;
	
	REP(i , m) cin>>a>>b , g[a].pb(b);
	
	REP(i , n) vis[i] = onStack[i] = false;
	
	REP(i , n)
	if(vis[i] == false) dfs(i);
	
}

// 450 dsa //

vector<vector<int>>ans;

void dfs(int node,vector<int>adj[],vector<int>&itime,
vector<int>&low,vector<bool>&visited,int &timer,stack<int>&s,
vector<bool>&stack_presence){
    itime[node]=low[node]=timer++;
    visited[node]=true;
    s.push(node);
    stack_presence[node]=true;
    
    for(int x:adj[node]){
        if(visited[x]==false){
            dfs(x,adj,itime,low,visited,timer,s,stack_presence);
            low[node]=min(low[node],low[x]);
        }
        //checking crossedge
        else{
            if(stack_presence[x]==true)
            low[node]=min(low[node],itime[x]);
        }
    }
    if(itime[node]==low[node]){
        vector<int>v;
        while(s.top()!=node){
            int val=s.top();
            s.pop();
            stack_presence[val]=false;
            v.push_back(val);
        }
        v.push_back(s.top());
        s.pop();
        stack_presence[node]=false;
        sort(v.begin(),v.end());
        ans.push_back(v);
    }
}
   //Function to return a list of lists of integers denoting the members 
   //of strongly connected components in the given graph.
   vector<vector<int>> tarjans(int V, vector<int> adj[])
   {
       //code here
       vector<int>itime(V,-1);
       vector<int>low(V,-1);
       vector<bool>visited(V,false);
       int timer=0;
       stack<int>s;
       vector<bool>stack_presence(V,false);
       for(int i=0;i<V;i++){
           if(visited[i]==false)
           dfs(i,adj,itime,low,visited,timer,s,stack_presence);
       }
       sort(ans.begin(),ans.end());
       return ans;
   }
